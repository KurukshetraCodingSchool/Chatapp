<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>ChatApp</title>
  <link rel="stylesheet" href="../stylesheets/style.css" />
</head>
<body>
  <h1>ChatApp</h1>
  <button id="joinRoom" onclick="joinRoom()">Join New Room</button>

  <div class="coversionArea">
    <div class="messages"></div>
    <div class="inputs">
      <input type="text" placeholder="Type a message" />
      <button>Send</button>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    let roomName = null;
    const username = prompt('Enter your Username');

    const input = document.querySelector('input');
    const sendButton = document.querySelector('.inputs button');
    const messagesDiv = document.querySelector('.messages');

    function joinRoom() {
      roomName = prompt('Enter Room Name');
      messagesDiv.innerHTML = ''; // Clear old messages
      socket.emit('joinRoom', roomName);
    }

    function formatTime(isoString) {
      const date = new Date(isoString);
      const hours = date.getHours().toString().padStart(2, '0');
      const minutes = date.getMinutes().toString().padStart(2, '0');
      return `${hours}:${minutes}`;
    }

    function incomingMessage(msg) {
  const isOwnMessage = msg.username === username;

  const messageDiv = document.createElement('div');
  messageDiv.className = `msg ${isOwnMessage ? 'outgoingMessage' : 'incomingMessage'}`;
  messageDiv.id = msg._id;
  messageDiv.onclick = () => deleteMessage(msg._id);

  messageDiv.innerHTML = `
    <div class="username">${msg.username}</div>
    <div class="data">${msg.msg}</div>
    <div class="time">${formatTime(msg.createdAt)}</div>
  `;

      messagesDiv.appendChild(messageDiv);
      messagesDiv.scrollTop = messagesDiv.scrollHeight; // Auto-scroll
    }
    function sendMessage() {
      const msg = input.value.trim();
      if (!msg || !roomName) return;

      const messageObject = {
        username,
        msg,
        roomName
      };

      socket.emit('sony', messageObject); // Send to server
      input.value = '';
    }

    function deleteMessage(id) {
      if (confirm("Delete This Message?")) {
        socket.emit('deleteMessage', id);
        const messageElem = document.getElementById(id);
        if (messageElem) messageElem.remove();
      }
    }

    sendButton.addEventListener('click', sendMessage);
    input.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') sendMessage();
    });

    socket.on('incomingMessage', (message) => {
      incomingMessage(message);
    });

    socket.on('messageDeleted', (id) => {
      const messageElem = document.getElementById(id);
      if (messageElem) messageElem.remove();
    });
  </script>
</body>
</html>
